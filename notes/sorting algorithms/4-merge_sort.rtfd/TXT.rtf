{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fmodern\fcharset0 Courier;
\f3\fmodern\fcharset0 Courier-Oblique;\f4\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red191\green100\blue38;
\red254\green187\blue91;\red153\green168\blue186;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c74902\c39216\c14902;
\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c33725\c51765\c67843;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}
\paperw11905\paperh16837\margl1134\margr1134\margb1134\margt1134\vieww33400\viewh18420\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs48 \cf0 Merge Sort
\f1\b0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
// https://www.programiz.com/dsa/merge-sort\
// https://www.geeksforgeeks.org/merge-sort\
// https://www.toptal.com/developers/sorting-algorithms\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2021-05-09 at 15.08.32.png \width18780 \height15800 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\fs26 \cf2 \cb3 // Divide the array into two sub arrays, sort them and merge them\
\cf4 private static void \cf5 mergeSort\cf6 (\cf4 int\cf6 [] arr\cf4 , int \cf6 leftIndex\cf4 , int \cf6 rightIndex) \{\
    \cf4 if \cf6 (leftIndex < rightIndex) \{\
        \cf4 int \cf6 middleIndex = (leftIndex + rightIndex) / \cf7 2\cf4 ;\
        
\f3\i \cf6 mergeSort
\f2\i0 (arr\cf4 , \cf6 leftIndex\cf4 , \cf6 middleIndex)\cf4 ;\
        
\f3\i \cf6 mergeSort
\f2\i0 (arr\cf4 , \cf6 middleIndex + \cf7 1\cf4 , \cf6 rightIndex)\cf4 ;\
        
\f3\i \cf6 merge
\f2\i0 (arr\cf4 , \cf6 leftIndex\cf4 , \cf6 middleIndex\cf4 , \cf6 rightIndex)\cf4 ;\
    \cf6 \}\
\}\
\
\cf2 // Merge two sub arrays L and M into arr\
\cf4 private static void \cf5 merge\cf6 (\cf4 int\cf6 [] arr\cf4 , int \cf6 leftIndex\cf4 , int \cf6 middleIndex\cf4 , int \cf6 rightIndex) \{\
\
    \cf2 // Create L 
\f4 \uc0\u8592 
\f2  A[left..rightIndex] and M 
\f4 \uc0\u8592 
\f2  A[middle+1..rightIndex]\
    \cf4 int \cf6 n1 = middleIndex - leftIndex + \cf7 1\cf4 ;\
    int \cf6 n2 = rightIndex - middleIndex\cf4 ;\
\
    int\cf6 [] L = \cf4 new int\cf6 [n1]\cf4 ;\
    int\cf6 [] M = \cf4 new int\cf6 [n2]\cf4 ;\
\
    for \cf6 (\cf4 int \cf6 i = \cf7 0\cf4 ; \cf6 i < n1\cf4 ; \cf6 i++)\{\
        L[i] = arr[leftIndex + i]\cf4 ;\
    \cf6 \}\
    \cf4 for \cf6 (\cf4 int \cf6 j = \cf7 0\cf4 ; \cf6 j < n2\cf4 ; \cf6 j++)\{\
        M[j] = arr[middleIndex + \cf7 1 \cf6 + j]\cf4 ;\
    \cf6 \}\
\
    \cf2 // Maintain current index of sub-arrays and main array\
    \cf4 int \cf6 i\cf4 , \cf6 j\cf4 , \cf6 k\cf4 ;\
    \cf6 i = \cf7 0\cf4 ;\
    \cf6 j = \cf7 0\cf4 ;\
    \cf6 k = leftIndex\cf4 ;\
\
    \cf2 // Until we reach either end of either L or M, pick larger among\
    // elements L and M and place them in the correct position at A[p..r]\
    \cf4 while \cf6 (i < n1 && j < n2) \{\
        \cf4 if \cf6 (L[i] <= M[j]) \{\
            arr[k] = L[i]\cf4 ;\
            \cf6 i++\cf4 ;\
        \cf6 \} \cf4 else \cf6 \{\
            arr[k] = M[j]\cf4 ;\
            \cf6 j++\cf4 ;\
        \cf6 \}\
        k++\cf4 ;\
    \cf6 \}\
\
    \cf2 // When we run out of elements in either L or M,\
    // pick up the remaining elements and put in A[p..r]\
    \cf4 while \cf6 (i < n1) \{\
        arr[k] = L[i]\cf4 ;\
        \cf6 i++\cf4 ;\
        \cf6 k++\cf4 ;\
    \cf6 \}\
\
    \cf4 while \cf6 (j < n2) \{\
        arr[k] = M[j]\cf4 ;\
        \cf6 j++\cf4 ;\
        \cf6 k++\cf4 ;\
    \cf6 \}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \cb1 \
\pard\pardeftab720\sl720\sa240\partightenfactor0

\f0\b\fs36 \cf0 Time Complexity
\f1\b0\fs24 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	\uc0\u8226 	}Best -> 		O(n *logn) 	 \
{\listtext	\uc0\u8226 	}Worst -> 		O(n *logn)    	\
{\listtext	\uc0\u8226 	}Average -> 	O(n *logn)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\sl720\sa240\partightenfactor0

\f0\b\fs36 \cf0 Space Complexity
\f1\b0\fs24 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	\uc0\u8226 	}O(n)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\sl720\sa240\partightenfactor0

\f0\b\fs36 \cf0 Applications
\f1\b0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf0 Merge sort is used if:\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls4\ilvl0\cf0 {\listtext	\uc0\u8226 	}useful for sorting linked lists\
{\listtext	\uc0\u8226 	}inversion count problem\
{\listtext	\uc0\u8226 	}external sorting\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\sl720\sa240\partightenfactor0

\f0\b\fs36 \cf0 Merge Sort vs Quick Sort
\f1\b0\fs24 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\uc0\u8226 	}Quick Sort is preferred over Merge Sort for sorting Arrays\
{\listtext	\uc0\u8226 	}Merge Sort is preferred over QuickSort for Linked Lists. Unlike array, in linked list, we can insert items in the middle in O(1) extra space and O(1) time.\
{\listtext	\uc0\u8226 	}Merge sort is more efficient and works faster than quick sort in case of larger array size or datasets. whereas Quick sort is more efficient and works faster than merge sort in case of smaller array size or datasets.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
}